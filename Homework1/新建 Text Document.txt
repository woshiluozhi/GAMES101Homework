Eigen::Matrix4f get_rotation(Vector3f axis, float angle)// 罗德里格斯任意轴旋转
{
    float a = angle / 180 * MY_PI;
    Eigen::Matrix4f I, N, rotation;
    Eigen::Vector4f n;
    Eigen::RowVector4f nt;

    n << axis.x(), axis.y(), axis.z(), 0;
    nt << axis.x(), axis.y(), axis.z(), 0;

    I = Eigen::Matrix4f::Identity();
    N << 0, -n.z(), n.y(), 0,
        n.z(), 0, -n.x(), 0,
        -n.y(), n.x(), 0, 0,
        0, 0, 0, 1;

    rotation = cos(a) * I + (1 - cos(a)) * n * nt + sin(a) * N;
    rotation(3, 3) = 1;//非齐次坐标的公式应用在齐次坐标上时记得运算完成后把矩阵的右下角改为1，否则会导致图形比例错误
    return rotation;
}

        Eigen::Matrix4f m = get_rotation(axis, rangle) * get_model_matrix(angle);
        r.set_model(m);
        r.set_view(get_view_matrix(eye_pos));
        r.set_projection(get_projection_matrix(45, 1, 0.1, 50));



int main(int argc, const char** argv)
{
    float angle = 0;
    bool command_line = false;
    std::string filename = "output.png";

    float rangle = 0;
    Vector3f axis;
    int mod = 0;

    if (argc >= 3) {
        command_line = true;
        angle = std::stof(argv[2]); // -r by default
        if (argc == 4) {
            filename = std::string(argv[3]);
        }
        else
            return 0;
    }

    rst::rasterizer r(700, 700);

    Eigen::Vector3f eye_pos = {0, 0, 5};

    std::vector<Eigen::Vector3f> pos{{2, 0, -2}, {0, 2, -2}, {-2, 0, -2}};

    std::vector<Eigen::Vector3i> ind{{0, 1, 2}};

    auto pos_id = r.load_positions(pos);
    auto ind_id = r.load_indices(ind);

    int key = 0;
    int frame_count = 0;

    if (command_line)
    {
        r.clear(rst::Buffers::Color | rst::Buffers::Depth);

        r.set_model(get_model_matrix(angle));
        r.set_view(get_view_matrix(eye_pos));
        r.set_projection(get_projection_matrix(45, 1, 0.1, 50));

        r.draw(pos_id, ind_id, rst::Primitive::Triangle);
        cv::Mat image(700, 700, CV_32FC3, r.frame_buffer().data());
        image.convertTo(image, CV_8UC3, 1.0f);

        cv::imwrite(filename, image);

        return 0;
    }

    std::cin >> axis.x() >> axis.y() >> axis.z();

    while (key != 27) 
    {
        r.clear(rst::Buffers::Color | rst::Buffers::Depth);

        Eigen::Matrix4f m = get_rotation(axis, rangle) * get_model_matrix(angle);
        r.set_model(m);
        r.set_view(get_view_matrix(eye_pos));
        r.set_projection(get_projection_matrix(45, 1, 0.1, 50));

        r.draw(pos_id, ind_id, rst::Primitive::Triangle);// 进行mvp计算

        cv::Mat image(700, 700, CV_32FC3, r.frame_buffer().data());
        image.convertTo(image, CV_8UC3, 1.0f);
        cv::imshow("image", image);
        key = cv::waitKey(10);

        std::cout << "frame count: " << frame_count++ << '\n';
        // std::cout << get_rotation(axis, rangle) << std::endl << std::endl;
        // std::cout << get_model_matrix(angle) << std::endl << std::endl;
        // std::cout << rangle << std::endl;

        if (key == 'r')
            mod ^= 1;
        else if (key == 'a')
        {
            if (mod == 0)
                angle += 10;
            else
                rangle += 10;
        }
        else if (key == 'd')
        {
            if (mod == 0)
                angle -= 10;
            else
                rangle -= 10;
        }
    }

    return 0;
}